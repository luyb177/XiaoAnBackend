// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.5
// Source: auth.proto

package server

import (
	"context"

	"github.com/luyb177/XiaoAnBackend/auth/internal/logic"
	"github.com/luyb177/XiaoAnBackend/auth/internal/svc"
	"github.com/luyb177/XiaoAnBackend/auth/pb/auth"
)

type AuthServiceServer struct {
	svcCtx *svc.ServiceContext
	auth.UnimplementedAuthServiceServer
}

func NewAuthServiceServer(svcCtx *svc.ServiceContext) *AuthServiceServer {
	return &AuthServiceServer{
		svcCtx: svcCtx,
	}
}

// 邮箱验证码
func (s *AuthServiceServer) SendEmailCode(ctx context.Context, in *auth.SendEmailRequest) (*auth.Response, error) {
	l := logic.NewSendEmailCodeLogic(ctx, s.svcCtx)
	return l.SendEmailCode(in)
}

func (s *AuthServiceServer) ValidateEmailCode(ctx context.Context, in *auth.ValidateEmailRequest) (*auth.Response, error) {
	l := logic.NewValidateEmailCodeLogic(ctx, s.svcCtx)
	return l.ValidateEmailCode(in)
}

// 邀请码
func (s *AuthServiceServer) GenerateInviteCode(ctx context.Context, in *auth.GenerateInviteCodeRequest) (*auth.Response, error) {
	l := logic.NewGenerateInviteCodeLogic(ctx, s.svcCtx)
	return l.GenerateInviteCode(in)
}

func (s *AuthServiceServer) ValidateInviteCode(ctx context.Context, in *auth.ValidateInviteCodeRequest) (*auth.Response, error) {
	l := logic.NewValidateInviteCodeLogic(ctx, s.svcCtx)
	return l.ValidateInviteCode(in)
}

// 注册登录
func (s *AuthServiceServer) Register(ctx context.Context, in *auth.RegisterRequest) (*auth.Response, error) {
	l := logic.NewRegisterLogic(ctx, s.svcCtx)
	return l.Register(in)
}

func (s *AuthServiceServer) Login(ctx context.Context, in *auth.LoginRequest) (*auth.Response, error) {
	l := logic.NewLoginLogic(ctx, s.svcCtx)
	return l.Login(in)
}
