// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.5
// Source: auth.proto

package authservice

import (
	"context"

	"github.com/luyb177/XiaoAnBackend/auth/pb/auth"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	GenerateInviteCodeRequest  = auth.GenerateInviteCodeRequest
	GenerateInviteCodeResponse = auth.GenerateInviteCodeResponse
	InviteCode                 = auth.InviteCode
	LoginRequest               = auth.LoginRequest
	LoginResponse              = auth.LoginResponse
	RegisterRequest            = auth.RegisterRequest
	RegisterResponse           = auth.RegisterResponse
	Response                   = auth.Response
	SendEmailRequest           = auth.SendEmailRequest
	User                       = auth.User
	ValidateEmailRequest       = auth.ValidateEmailRequest
	ValidateInviteCodeRequest  = auth.ValidateInviteCodeRequest

	AuthService interface {
		// 邮箱验证码
		SendEmailCode(ctx context.Context, in *SendEmailRequest, opts ...grpc.CallOption) (*Response, error)
		ValidateEmailCode(ctx context.Context, in *ValidateEmailRequest, opts ...grpc.CallOption) (*Response, error)
		// 邀请码
		GenerateInviteCode(ctx context.Context, in *GenerateInviteCodeRequest, opts ...grpc.CallOption) (*Response, error)
		ValidateInviteCode(ctx context.Context, in *ValidateInviteCodeRequest, opts ...grpc.CallOption) (*Response, error)
		// 注册登录
		Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*Response, error)
		Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*Response, error)
	}

	defaultAuthService struct {
		cli zrpc.Client
	}
)

func NewAuthService(cli zrpc.Client) AuthService {
	return &defaultAuthService{
		cli: cli,
	}
}

// 邮箱验证码
func (m *defaultAuthService) SendEmailCode(ctx context.Context, in *SendEmailRequest, opts ...grpc.CallOption) (*Response, error) {
	client := auth.NewAuthServiceClient(m.cli.Conn())
	return client.SendEmailCode(ctx, in, opts...)
}

func (m *defaultAuthService) ValidateEmailCode(ctx context.Context, in *ValidateEmailRequest, opts ...grpc.CallOption) (*Response, error) {
	client := auth.NewAuthServiceClient(m.cli.Conn())
	return client.ValidateEmailCode(ctx, in, opts...)
}

// 邀请码
func (m *defaultAuthService) GenerateInviteCode(ctx context.Context, in *GenerateInviteCodeRequest, opts ...grpc.CallOption) (*Response, error) {
	client := auth.NewAuthServiceClient(m.cli.Conn())
	return client.GenerateInviteCode(ctx, in, opts...)
}

func (m *defaultAuthService) ValidateInviteCode(ctx context.Context, in *ValidateInviteCodeRequest, opts ...grpc.CallOption) (*Response, error) {
	client := auth.NewAuthServiceClient(m.cli.Conn())
	return client.ValidateInviteCode(ctx, in, opts...)
}

// 注册登录
func (m *defaultAuthService) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*Response, error) {
	client := auth.NewAuthServiceClient(m.cli.Conn())
	return client.Register(ctx, in, opts...)
}

func (m *defaultAuthService) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*Response, error) {
	client := auth.NewAuthServiceClient(m.cli.Conn())
	return client.Login(ctx, in, opts...)
}
